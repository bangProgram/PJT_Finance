<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE  mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="portfolioMapper">
	
	<sql id="wherePortfolio">
		<if test=" pCorpCd != null and pCorpCd != '' ">
			AND A.CORP_CODE = #{pCorpCd}
		</if>
		<if test=" curUserId != null and curUserId != ''  ">
			AND A.USER_ID = #{curUserId}
		</if>
	</sql>
	
	<select id="getPortfolio" parameterType="Map" resultType="HashMap">  
	    select 
	    	USER_ID, DEPOSIT_AMOUNT, INVEST_AMOUNT, RESERVE_AMOUNT, CREATE_ID, CREATE_DT, CHANGE_ID, CHANGE_DT, MEMO
	    from TB_PORTFOLIO
	    WHERE 1=1
	</select>
	
	<select id="getPortAmount" parameterType="Map" resultType="HashMap">  
	    SELECT 
		    B.DEPOSIT_AMOUNT, B.RESERVE_AMOUNT, 
		    ROUND(NVL(B.INVEST_AMOUNT,0),0) AS INVEST_AMOUNT,
			ROUND(NVL(SUM(A.HOLD_QUANTITY * A.AVR_PRICE),0),0) AS CORP_INVEST_AMOUNT,
			ROUND((NVL(B.INVEST_AMOUNT,0) - NVL(SUM(A.HOLD_QUANTITY * A.AVR_PRICE),0)),0) AS DIFF_INVEST_AMOUNT
		FROM TB_PORTFOLIO_CORP A, TB_PORTFOLIO B
		WHERE 1=1
		AND A.USER_ID = B.USER_ID
		<include refid = "wherePortfolio"/>
		GROUP BY B.DEPOSIT_AMOUNT,B.INVEST_AMOUNT,B.RESERVE_AMOUNT
	</select>
	
	
	
	<select id="getPortCorp" parameterType="Map" resultType="HashMap">  
	    select 
	    	CORP_CODE,USER_ID,CORP_NAME,STOCK_CODE,GUBN,
	    	CREATE_ID,CREATE_DT,CHANGE_ID,CHANGE_DT
	    	,TO_CHAR(MEMO) AS MEMO,
	    	NVL(INVEST_OPINION,'미추정') INVEST_OPINION,
	    	TO_CHAR(HOLD_QUANTITY,'FM999,999,999,999') AS HOLD_QUANTITY,
	    	TO_CHAR(ROUND(AVR_PRICE,2),'FM999,999,999,999') AS AVR_PRICE,
	    	ROUND(AVR_PRICE,0) AS CAL_AVR_PRICE,
	    	AVR_PER,
	    	nvl(ESTIMATE_EPS,'미추정') ESTIMATE_EPS,
	    	ESTIMATE_CAGR,
	    	nvl(AVG_REVENUE_GROWTH,'0') AVG_REVENUE_GROWTH,
	    	nvl(AVG_OPERAT_GROWTH,'0') AVG_OPERAT_GROWTH,
	    	nvl(AVG_PROFIT_GROWTH,'0') AVG_PROFIT_GROWTH,
	    	ROUND(nvl((bef_cls_price / estimate_eps),0),2) AS CURRENT_PER,
	    	TO_CHAR(BEF_CLS_PRICE,'FM999,999,999,999') AS BEF_CLS_PRICE,
	    	TO_CHAR(SHARES_AMOUNT,'FM999,999,999,999') AS SHARES_AMOUNT,
	    	OPINION_AMOUNT1,OPINION_AMOUNT2,OPINION_AMOUNT3,OPINION_AMOUNT4,OPINION_AMOUNT5,
    		CASE WHEN 
    			<![CDATA[
    					NVL(BEF_CLS_PRICE,0) < ( NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT1,0) )
						THEN to_char(NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT1,0), 'FM999,999,999,999')
						WHEN NVL(BEF_CLS_PRICE,0) < ( NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT2,0) )
						THEN to_char(NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT2,0), 'FM999,999,999,999')
						WHEN NVL(BEF_CLS_PRICE,0) < ( NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT3,0) )
						THEN to_char(NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT3,0), 'FM999,999,999,999')
						WHEN NVL(BEF_CLS_PRICE,0) < ( NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT4,0) )
						THEN to_char(NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT4,0), 'FM999,999,999,999')
						WHEN NVL(BEF_CLS_PRICE,0) >= ( NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT5,0) )
						THEN to_char(NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT5,0), 'FM999,999,999,999')
						ELSE '0'
				]]>
			END as invest_opinion_amount
	    from TB_PORTFOLIO_CORP A
	    WHERE 1=1
	    	<include refid = "wherePortfolio"/>
	</select>
	
	<select id="getPortCorpList" parameterType="Map" resultType="HashMap">  
	    select 
	    	CORP_CODE,USER_ID,CORP_NAME,STOCK_CODE,GUBN,
	    	CREATE_ID,CREATE_DT,CHANGE_ID,CHANGE_DT
	    	,TO_CHAR(MEMO) AS MEMO,
	    	NVL(INVEST_OPINION,'미추정') INVEST_OPINION,
	    	TO_CHAR(HOLD_QUANTITY,'FM999,999,999,999') AS HOLD_QUANTITY,
	    	TO_CHAR(ROUND(AVR_PRICE,2),'FM999,999,999,999') AS AVR_PRICE,
	    	ESTIMATE_EPS,
	    	nvl(AVG_REVENUE_GROWTH,'0') AVG_REVENUE_GROWTH,
	    	nvl(AVG_OPERAT_GROWTH,'0') AVG_OPERAT_GROWTH,
	    	nvl(AVG_PROFIT_GROWTH,'0') AVG_PROFIT_GROWTH,
	    	TO_CHAR(ROUND(BEF_CLS_PRICE,2),'FM999,999,999,999') AS BEF_CLS_PRICE,
	    	CASE WHEN 
    			<![CDATA[
    					NVL(BEF_CLS_PRICE,0) < ( NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT1,0) )
						THEN to_char(NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT1,0), 'FM999,999,999,999')
						WHEN NVL(BEF_CLS_PRICE,0) < ( NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT2,0) )
						THEN to_char(NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT2,0), 'FM999,999,999,999')
						WHEN NVL(BEF_CLS_PRICE,0) < ( NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT3,0) )
						THEN to_char(NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT3,0), 'FM999,999,999,999')
						WHEN NVL(BEF_CLS_PRICE,0) < ( NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT4,0) )
						THEN to_char(NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT4,0), 'FM999,999,999,999')
						WHEN NVL(BEF_CLS_PRICE,0) >= ( NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT5,0) )
						THEN to_char(NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT5,0), 'FM999,999,999,999')
						ELSE '0'
				]]>
			END as INVEST_OPINION_AMOUNT,
	    	SHARES_AMOUNT,
	    	ROUND(nvl((bef_cls_price / estimate_eps),0),2) AS CURRENT_PER, nvl(AVR_PER,0) as AVR_PER,
	    	nvl(ESTIMATE_CAGR,0) as ESTIMATE_CAGR
	    from TB_PORTFOLIO_CORP A
	    WHERE 1=1
	    	<include refid = "wherePortfolio"/>
	    ORDER BY 
	    	NVL(TO_NUMBER(HOLD_QUANTITY),0) DESC 
	</select>
	
	<select id="getPortCorpDetailList" parameterType="Map" resultType="HashMap">  
	    select 
	    	SEQ,
	    	CORP_CODE,USER_ID,
	    	GUBN, fun_getCodeNm(GUBN,'0001') as GUBN_NM,
	    	CREATE_ID,CREATE_DT,CHANGE_ID,CHANGE_DT,
	    	MEMO,
	    	BUY_QUANTITY,SELL_QUANTITY,
	    	TO_CHAR(BUY_AMOUNT,'FM999,999,999,999') AS BUY_AMOUNT,
	    	TO_CHAR(SELL_AMOUNT,'FM999,999,999,999') AS SELL_AMOUNT,
	    	TO_CHAR(RETURN_AMOUNT,'FM999,999,999,999') AS RETURN_AMOUNT,
	    	TRADE_DATE,
	    	TO_CHAR(TRADE_PRICE,'FM999,999,999,999') AS TRADE_PRICE
	    from TB_PORTFOLIO_CORP_DETAIL A
	    WHERE 1=1
	    	<include refid = "wherePortfolio"/>
	    ORDER BY TRADE_DATE DESC, SEQ DESC
	</select>
	
	<insert id="mergePortfolioCorp" parameterType="hashMap"  >  
		BEGIN
		MERGE 
		 	INTO TB_PORTFOLIO_CORP a
		USING dual
		   ON (
		   		a.CORP_CODE = #{CORP_CODE}
		   		and a.USER_ID = #{curUserId} 
		   	)
		 WHEN MATCHED THEN
		      UPDATE
		        <set>
		         	<if test="MEMO != null and MEMO != '' ">
						MEMO		=	#{MEMO},
					</if>
					<if test="AVG_REVENUE_GROWTH != null and AVG_REVENUE_GROWTH != '' ">
						AVG_REVENUE_GROWTH		=	#{AVG_REVENUE_GROWTH},
					</if>
					<if test="AVG_OPERAT_GROWTH != null and AVG_OPERAT_GROWTH != '' ">
						AVG_OPERAT_GROWTH		=	#{AVG_OPERAT_GROWTH},
					</if>
					<if test="AVG_PROFIT_GROWTH != null and AVG_PROFIT_GROWTH != '' ">
						AVG_PROFIT_GROWTH		=	#{AVG_PROFIT_GROWTH},
					</if> 
					<if test="OPINION_AMOUNT1 != null and OPINION_AMOUNT1 != '' ">
						OPINION_AMOUNT1		=	#{OPINION_AMOUNT1},
					</if>
					<if test="OPINION_AMOUNT2 != null and OPINION_AMOUNT2 != '' ">
						OPINION_AMOUNT2		=	#{OPINION_AMOUNT2},
					</if>
					<if test="OPINION_AMOUNT3 != null and OPINION_AMOUNT3 != '' ">
						OPINION_AMOUNT3		=	#{OPINION_AMOUNT3},
					</if> 
					<if test="OPINION_AMOUNT4 != null and OPINION_AMOUNT4 != '' ">
						OPINION_AMOUNT4		=	#{OPINION_AMOUNT4},
					</if>
					<if test="OPINION_AMOUNT5 != null and OPINION_AMOUNT5 != '' ">
						OPINION_AMOUNT5		=	#{OPINION_AMOUNT5},
					</if>
					<if test="ESTIMATE_EPS != null and ESTIMATE_EPS != '' ">
						ESTIMATE_EPS		=	#{ESTIMATE_EPS},
					</if>
					<if test="AVR_PER != null and AVR_PER != '' ">
						AVR_PER		=	#{AVR_PER},
					</if>
					<if test="ESTIMATE_CAGR != null and ESTIMATE_CAGR != '' ">
						ESTIMATE_CAGR		=	#{ESTIMATE_CAGR},
					</if>
		         	a.CHANGE_ID = #{curUserId},
		          	a.CHANGE_DT = TO_CHAR(SYSDATE,'YYYY-MM-DD')
					</set>
			 WHEN NOT MATCHED THEN
					INSERT (
					    CORP_CODE,
					    USER_ID,
					    <if test="CORP_NAME != null and CORP_NAME != '' ">
							CORP_NAME,
						</if>
						<if test="STOCK_CODE != null and STOCK_CODE != '' ">
							STOCK_CODE,
						</if>
						<if test="AVG_REVENUE_GROWTH != null and AVG_REVENUE_GROWTH != '' ">
							AVG_REVENUE_GROWTH,
						</if>
						<if test="AVG_OPERAT_GROWTH != null and AVG_OPERAT_GROWTH != '' ">
							AVG_OPERAT_GROWTH,
						</if>
						<if test="AVG_PROFIT_GROWTH != null and AVG_PROFIT_GROWTH != '' ">
							AVG_PROFIT_GROWTH,
						</if> 
					    GUBN,
					    CREATE_ID,CREATE_DT,CHANGE_ID,CHANGE_DT,MEMO	
					) VALUES (
						#{CORP_CODE}, #{curUserId},
						<if test="CORP_NAME != null and CORP_NAME != '' ">
							#{CORP_NAME},
						</if>
						<if test="STOCK_CODE != null and STOCK_CODE != '' ">
							#{STOCK_CODE},
						</if>
						<if test="AVG_REVENUE_GROWTH != null and AVG_REVENUE_GROWTH != '' ">
							#{AVG_REVENUE_GROWTH},
						</if>
						<if test="AVG_OPERAT_GROWTH != null and AVG_OPERAT_GROWTH != '' ">
							#{AVG_OPERAT_GROWTH},
						</if>
						<if test="AVG_PROFIT_GROWTH != null and AVG_PROFIT_GROWTH != '' ">
							#{AVG_PROFIT_GROWTH},
						</if>
						'',
					    #{curUserId} ,TO_CHAR(SYSDATE,'YYYY-MM-DD') ,#{curUserId} ,TO_CHAR(SYSDATE,'YYYY-MM-DD'),
						(
					        SELECT
					            to_CLOB(memo) AS memo
					        FROM
					            tb_interest a
					        WHERE
					                1 = 1
					            AND a.corp_code = #{CORP_CODE}
					            AND a.user_id = #{curUserId}
					    )
					)
	    			;

			UPDATE  TB_PORTFOLIO_CORP a SET INVEST_OPINION = (
				SELECT 
					<![CDATA[ 
					CASE WHEN NVL(BEF_CLS_PRICE,0) < ( NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT1,0) )
						THEN '매수'
						WHEN NVL(BEF_CLS_PRICE,0) < ( NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT2,0) )
						THEN '비중확대'
						WHEN NVL(BEF_CLS_PRICE,0) < ( NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT3,0) )
						THEN '중립'
						WHEN NVL(BEF_CLS_PRICE,0) < ( NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT4,0) )
						THEN '비중축소'
						WHEN NVL(BEF_CLS_PRICE,0) >= ( NVL(ESTIMATE_EPS,0)* NVL(OPINION_AMOUNT4,0) )
						THEN '매도'
						ELSE '의견없음'
					END
					]]> 
				FROM TB_PORTFOLIO_CORP A WHERE 
					a.CORP_CODE = #{CORP_CODE}
		   			and a.USER_ID = #{curUserId}
			)
			WHERE
		   		a.CORP_CODE = #{CORP_CODE}
		   		and a.USER_ID = #{curUserId}
		   	;
		   	
		   	UPDATE  TB_PORTFOLIO_CORP a SET ESTIMATE_CAGR = (
				SELECT 
				    DECODE((SELECT ESTIMATE_CAGR FROM TB_PORTFOLIO_CORP WHERE CORP_CODE = #{CORP_CODE} and USER_ID = #{curUserId}),
				    NULL,
				    ROUND(POWER((SUM(MAX_ACC_NET_AMOUNT)/SUM(MIN_ACC_NET_AMOUNT)),(1/(MAX_RNK-MIN_RNK)))-1,4)*100,
				    (SELECT ESTIMATE_CAGR FROM TB_PORTFOLIO_CORP WHERE CORP_CODE = #{CORP_CODE} and USER_ID = #{curUserId})
				    ) AS CAGR
				FROM (
				    SELECT 
				        DISTINCT STOCK_CODE, CORP_CODE, CORP_NAME,
				        MIN(RNK) OVER(PARTITION BY CORP_CODE ) AS MIN_RNK, 
				        MAX(RNK) OVER(PARTITION BY CORP_CODE ) AS MAX_RNK, 
				        FIRST_VALUE(ACCUMULATED_NET_AMOUNT) OVER(PARTITION BY CORP_CODE) AS MIN_ACC_NET_AMOUNT,
				        LAST_VALUE(ACCUMULATED_NET_AMOUNT) OVER(PARTITION BY CORP_CODE) AS MAX_ACC_NET_AMOUNT
				    FROM (
				        SELECT 
				            A.CORP_CODE AS STOCK_CODE, B.CORP_CODE , B.CORP_NAME,
				            DENSE_RANK() OVER(PARTITION BY A.CORP_CODE ORDER BY A.CORP_CODE, BSNS_YEAR) AS RNK,
				            NVL(ACCUMULATED_NET_AMOUNT,0) AS ACCUMULATED_NET_AMOUNT  
				        FROM TB_BPLC_CIS A, TB_BPLC B
				        WHERE 1=1
				        AND A.CORP_CODE = B.STOCK_CODE
				        AND replace(account_id, 'ifrs_', 'ifrs-full_') IN 
				        ( 
				            'ifrs-full_BasicEarningsLossPerShare'
				        )
				        AND REPRT_CODE = '11011'
				    )
				)
				WHERE 1=1
				AND MAX_RNK > 1
				AND MIN_ACC_NET_AMOUNT > 0
				AND MAX_ACC_NET_AMOUNT > 0 
				AND CORP_CODE = #{CORP_CODE}
				GROUP BY STOCK_CODE, CORP_CODE, CORP_NAME, MIN_RNK, MAX_RNK
			)
			WHERE
		   		a.CORP_CODE = #{CORP_CODE}
		   		and a.USER_ID = #{curUserId}
		   	;
		   	
		END;
	</insert>
	
	<insert id="insertPortfolioAsset" parameterType="Map"  >  
		MERGE 
		 	INTO TB_PORTFOLIO a
		USING dual
		   ON (
		   		a.USER_ID = 'SYSTEM_JB' 
		   	)
		WHEN MATCHED THEN
			UPDATE
				<set>
					<if test="DEPOSIT_AMOUNT != null and DEPOSIT_AMOUNT != '' ">
						DEPOSIT_AMOUNT		=	#{DEPOSIT_AMOUNT},
					</if>
					<if test="RESERVE_AMOUNT != null and RESERVE_AMOUNT != '' ">
						RESERVE_AMOUNT		=	#{RESERVE_AMOUNT},
					</if>
					CHANGE_DT 		=	SYSDATE,
					CHANGE_ID		=	'SYSTEM_JB'
				</set>
		WHEN NOT MATCHED THEN
				INSERT (
				    USER_ID, 
				    <if test="DEPOSIT_AMOUNT != null and DEPOSIT_AMOUNT != '' ">
						DEPOSIT_AMOUNT,
					</if>
					<if test="RESERVE_AMOUNT != null and RESERVE_AMOUNT != '' ">
						RESERVE_AMOUNT,
					</if>
				    <if test="INVEST_AMOUNT != null and INVEST_AMOUNT != '' ">
						INVEST_AMOUNT,
					</if>
					<if test="MEMO != null and MEMO != '' ">
						MEMO,
					</if>
				    CREATE_ID, CREATE_DT, CHANGE_ID, CHANGE_DT
				) VALUES (
					'SYSTEM_JB', 
					<if test="DEPOSIT_AMOUNT != null and DEPOSIT_AMOUNT != '' ">
						#{DEPOSIT_AMOUNT},
					</if>
					<if test="RESERVE_AMOUNT != null and RESERVE_AMOUNT != '' ">
						#{RESERVE_AMOUNT},
					</if>
				    <if test="INVEST_AMOUNT != null and INVEST_AMOUNT != '' ">
						#{INVEST_AMOUNT},
					</if>
					<if test="MEMO != null and MEMO != '' ">
						#{MEMO},
					</if>
				    'SYSTEM_JB', TO_CHAR(SYSDATE,'YYYY-MM-DD'), 'SYSTEM_JB', TO_CHAR(SYSDATE,'YYYY-MM-DD') 
				)
	    
	</insert>
	
	<delete id="deletePortfolioCorp" parameterType="hashMap"  >  
	    DELETE  TB_PORTFOLIO_CORP 
	    WHERE 1=1
	    <if test="delCorpCnt != 0 ">
			AND CORP_CODE IN 
			<foreach collection="delCorpList" item="item" open="(" close=")" separator=",">
				#{item}
			</foreach>
		</if>
	    AND USER_ID = 'SYSTEM_JB'
	</delete>
	
	<insert id="addPortfolioDetail" parameterType="hashMap"  >  
		BEGIN
			
			<if test="gubn == '0101'">
				UPDATE TB_PORTFOLIO_CORP
			    SET
			        AVR_PRICE = (
			            SELECT
			                ( ( NVL(( A.AVR_PRICE * A.HOLD_QUANTITY ),0) + TO_NUMBER(#{BUY_AMOUNT})  ) / (NVL(A.HOLD_QUANTITY,0) + TO_NUMBER(#{BUY_QUANTITY}) ) )
			            FROM
			                TB_PORTFOLIO_CORP A
			            WHERE
			                    CORP_CODE = #{CORP_CODE}
			                AND USER_ID = #{curUserId}
			        )
			    WHERE
			            CORP_CODE = #{CORP_CODE}
			        AND USER_ID = #{curUserId}
				;
			</if>	
			
		    INSERT INTO TB_PORTFOLIO_CORP_DETAIL (
		    	SEQ,CORP_CODE,USER_ID,
		    	GUBN,
		    	CREATE_ID,CREATE_DT,CHANGE_ID,CHANGE_DT,
		    	MEMO,
		    	BUY_QUANTITY,SELL_QUANTITY,
		    	BUY_AMOUNT,SELL_AMOUNT,
		    	RETURN_AMOUNT,
		    	TRADE_DATE,TRADE_PRICE
		    ) VALUES (
		    	(SELECT NVL(MAX(SEQ),0)+1 FROM TB_PORTFOLIO_CORP_DETAIL WHERE CORP_CODE=#{CORP_CODE} AND USER_ID=#{curUserId}),
		    	#{CORP_CODE},#{curUserId},
		    	#{gubn},
		    	#{curUserId},TO_CHAR(SYSDATE,'YYYY-MM-DD'),#{curUserId},TO_CHAR(SYSDATE,'YYYY-MM-DD'),
		    	#{MEMO},
		    	#{BUY_QUANTITY},#{SELL_QUANTITY},
		    	#{BUY_AMOUNT},#{SELL_AMOUNT},
		    	#{RETURN_AMOUNT},
		    	#{TRADE_DATE},#{TRADE_PRICE}
		    )
		    ;
			
			UPDATE TB_PORTFOLIO_CORP SET 
				HOLD_QUANTITY = (SELECT SUM(NVL(BUY_QUANTITY,0)) - SUM(NVL(SELL_QUANTITY,0)) FROM TB_PORTFOLIO_CORP_DETAIL  WHERE CORP_CODE = #{CORP_CODE} AND USER_ID = #{curUserId}) 
			WHERE CORP_CODE = #{CORP_CODE}
			AND USER_ID = #{curUserId}
			;
		
			UPDATE TB_PORTFOLIO SET INVEST_AMOUNT = (
				SELECT SUM(HOLD_QUANTITY*AVR_PRICE) FROM TB_PORTFOLIO_CORP
			)
			;
			
		END;
	</insert>
	
	<delete id="delPortfolioDetail" parameterType="hashMap"  >  
		BEGIN
		    DELETE  TB_PORTFOLIO_CORP_DETAIL 
		    WHERE 1=1
		    AND CORP_CODE = #{CORP_CODE}
		    AND USER_ID = #{curUserId}
		    AND SEQ IN 
			<foreach collection="delSEQs" item="item" open="(" close=")" separator=",">
				#{item}
			</foreach>
			;
			
			UPDATE TB_PORTFOLIO_CORP SET 
				HOLD_QUANTITY = (SELECT SUM(NVL(BUY_QUANTITY,0)) - SUM(NVL(SELL_QUANTITY,0)) FROM TB_PORTFOLIO_CORP_DETAIL  WHERE CORP_CODE = #{CORP_CODE} AND USER_ID = #{curUserId}) 
			WHERE CORP_CODE = #{CORP_CODE}
			AND USER_ID = #{curUserId}
			;
			
			UPDATE TB_PORTFOLIO_CORP a SET 
				AVR_PRICE =  ( SELECT (SUM(BUY_AMOUNT) / SUM(BUY_QUANTITY)) FROM TB_PORTFOLIO_CORP_DETAIL WHERE CORP_CODE = #{CORP_CODE} AND USER_ID = #{curUserId} )
			WHERE CORP_CODE = #{CORP_CODE}
			AND USER_ID = #{curUserId}
			;
			
			UPDATE TB_PORTFOLIO SET INVEST_AMOUNT = (
				SELECT SUM(HOLD_QUANTITY*AVR_PRICE) FROM TB_PORTFOLIO_CORP
			)
			;
		END;
		
	</delete>
	
</mapper>