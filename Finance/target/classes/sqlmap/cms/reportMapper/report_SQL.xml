<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE  mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="reportMapper">

	<sql id="whereReport">
		<if test="pAccountCnt != 0 ">
			AND replace(account_id, 'ifrs_', 'ifrs-full_') IN 
			<foreach collection="pAccountIds" item="item" open="(" close=")" separator=",">
				#{item}
			</foreach>
		</if>
		
		<if test="pAccountCnt == 0  ">
			AND replace(account_id, 'ifrs_', 'ifrs-full_') IN 
			( 'ifrs-full_Revenue' , 'dart_OperatingIncomeLoss' , 'ifrs-full_ProfitLoss')
		</if>
		
		<if test="chkCorpList != null and chkCorpList != '' ">
			AND A.CORP_CODE IN 
			(
			<foreach collection="chkCorpList" item="item" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="(pStartYear != null and pStartYear != '') or (pEndYear != null and pEndYear != '') ">
			AND A.BSNS_YEAR BETWEEN #{pStartYear} AND #{pEndYear}
		</if>
		<if test="pCorpName != null and pCorpName != '' ">
			AND B.CORP_NAME like '%'|| #{pCorpName} ||'%'
		</if>
	</sql>
	
	<insert id="insert" parameterType="hashMap" useGeneratedKeys="true" keyProperty="book_id">  
	    insert into book
	    (title, category, price) 
	    values
	    (#{title}, #{category}, #{price})
	</insert>
	
	<select id="getBsnsYearList"  parameterType="hashMap" resultType="HashMap">
		SELECT 
		     ROWNUM, BSNS_YEAR, REPRT_CODE, DECODE(REPRT_CODE,'11011','Q4_','11012','Q2_')||BSNS_YEAR AS HAEDER_NM
		FROM (
		    SELECT 
		        BSNS_YEAR, REPRT_CODE
		    FROM TB_BPLC_CIS
		    WHERE 1=1
		    	<if test="pReportCd == '11011' ">
		    		and reprt_code = '11011'
		    	</if>
		    GROUP BY 
		        BSNS_YEAR, REPRT_CODE 
		    ORDER BY 
		        BSNS_YEAR DESC
		)
		WHERE 1=1
		<![CDATA[
		     AND ROWNUM <= 5
		]]>
		
	</select>
	
	
	<select id="getReprtCorpCode" parameterType="hashMap" resultType="HashMap">  
		<if test="chkGrowthGb == '02' ">
			SELECT 
			    CORP_CODE, CORP_NAME, YEAR_CNT, CAGR
			FROM (
			    SELECT 
			        STOCK_CODE AS CORP_CODE, CORP_NAME, MAX_RNK-MIN_RNK AS YEAR_CNT,
			        <![CDATA[
			        CASE 
			            WHEN SUM(MAX_ACC_NET_AMOUNT) > 0 AND SUM(MIN_ACC_NET_AMOUNT) > 0 AND (MAX_RNK-MIN_RNK) > 0
			            THEN ROUND(POWER((SUM(MAX_ACC_NET_AMOUNT)/SUM(MIN_ACC_NET_AMOUNT)),(1/(MAX_RNK-MIN_RNK)))-1,4)*100
			            ELSE 0
			        END
			        ]]>
			         AS CAGR
			    FROM (
			        SELECT 
			            DISTINCT
                        STOCK_CODE, CORP_CODE, CORP_NAME, 
			            MIN(RNK) OVER(PARTITION BY CORP_CODE ORDER BY RNK ) AS MIN_RNK, 
			            MAX(RNK) OVER(PARTITION BY CORP_CODE ORDER BY RNK ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS MAX_RNK, 
			            FIRST_VALUE(ACCUMULATED_NET_AMOUNT) OVER(PARTITION BY CORP_CODE ORDER BY RNK) AS MIN_ACC_NET_AMOUNT,
			            LAST_VALUE(ACCUMULATED_NET_AMOUNT) OVER(PARTITION BY CORP_CODE ORDER BY RNK ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) AS MAX_ACC_NET_AMOUNT
			        FROM (
			            SELECT 
			                A.CORP_CODE AS STOCK_CODE, B.CORP_CODE , B.CORP_NAME,
			                DENSE_RANK() OVER(PARTITION BY A.CORP_CODE ORDER BY A.CORP_CODE, BSNS_YEAR) AS RNK,
			                NVL(ACCUMULATED_NET_AMOUNT,0) AS ACCUMULATED_NET_AMOUNT  
			            FROM TB_BPLC_CIS A, TB_BPLC_DETAIL B
			            WHERE 1=1
			            AND A.CORP_CODE = B.STOCK_CODE
			            AND replace(account_id, 'ifrs_', 'ifrs-full_') IN 
			            ( 
			                'ifrs-full_BasicEarningsLossPerShare'
			            )
			            AND REPRT_CODE = '11011'
			        )
			    )
			    GROUP BY STOCK_CODE, CORP_CODE, CORP_NAME, MIN_RNK, MAX_RNK
			)
			WHERE 1=1
			AND CAGR >= #{chkAccRate}
		</if>
	
		<if test="pReportCd == '11011' and chkGrowthGb != '02' ">
			SELECT * FROM (
				select rank () over(partition by corp_code order by account_id) as rnk, a.* from (
					SELECT 
						<foreach collection="pYearList" item="item" >
							sum(DECODE(bsns_year ,#{item},ROUND(((ACC_NET_AMOUNT - LEAD_ACC_NET_AMOUNT) / DECODE(LEAD_ACC_NET_AMOUNT, 0, NULL, LEAD_ACC_NET_AMOUNT) * 100), 2))) AS RATE_${item},
						</foreach>
					    corp_code , corp_name , account_id
					FROM (
						select NVL(A.NET_AMOUNT,0) AS NET_AMOUNT, LEAD(NVL(A.NET_AMOUNT,0)) OVER (PARTITION BY A.CORP_CODE, REPLACE(A.ACCOUNT_ID,'ifrs_','ifrs-full_') ORDER BY A.CORP_CODE, A.BSNS_YEAR DESC, A.REPRT_CODE ASC) AS LEAD_NET_AMOUNT,
						        NVL(A.ACCUMULATED_NET_AMOUNT,0) AS ACC_NET_AMOUNT, LEAD(NVL(A.ACCUMULATED_NET_AMOUNT,0)) OVER (PARTITION BY A.CORP_CODE, REPLACE(A.ACCOUNT_ID,'ifrs_','ifrs-full_') ORDER BY A.CORP_CODE, A.BSNS_YEAR DESC, A.REPRT_CODE ASC) AS LEAD_ACC_NET_AMOUNT,
						        NVL(A.BEF_NET_AMOUNT,0) AS BEF_NET_AMOUNT,  LEAD(NVL(A.BEF_NET_AMOUNT,0)) OVER (PARTITION BY A.CORP_CODE, REPLACE(A.ACCOUNT_ID,'ifrs_','ifrs-full_') ORDER BY A.CORP_CODE, A.BSNS_YEAR DESC, A.REPRT_CODE ASC) AS LEAD_BEF_NET_AMOUNT,
						        NVL(A.BEF_ACCUMULATED_NET_AMOUNT,0) AS BEF_ACC_NET_AMOUNT, LEAD(NVL(A.BEF_ACCUMULATED_NET_AMOUNT,0)) OVER (PARTITION BY A.CORP_CODE, REPLACE(A.ACCOUNT_ID,'ifrs_','ifrs-full_') ORDER BY A.CORP_CODE, A.BSNS_YEAR DESC, A.REPRT_CODE ASC) AS LEAD_BEF_ACC_NET_AMOUNT,
						        a.corp_code , b.corp_name , REPLACE(a.ACCOUNT_ID,'ifrs_','ifrs-full_') as ACCOUNT_ID, a.bsns_year, a.reprt_code 
						from tb_Bplc_cis a inner join TB_BPLC_DETAIL b
						on a.corp_code = b.stock_code
						where 1=1
						<include refid = "whereReport"/>
						AND A.REPRT_CODE = #{pReportCd}
					) A
					group by corp_code , corp_name , account_id
				) a
				where  1=1 
				<if test="chkYearList != '' and chkYearList != null ">
						<foreach collection="chkYearList" item="item" >
							AND RATE_${item} > #{chkAccRate}
						</foreach>
				</if>
			)
			where 1=1
			<if test="pAccountCnt != 0 ">
				and rnk = #{pAccountCnt}
			</if>
			<if test="pAccountCnt == 0 ">
				and rnk = 3
			</if>
		</if>
		<if test="pReportCd == '11012' and chkGrowthGb != '02' ">
		SELECT
			    *
			FROM
			    (
			    SELECT
			        RANK()
			        OVER(PARTITION BY corp_code
			        ORDER BY
			         account_id
			        ) AS rnk,
			        a.*
			    FROM
			    (
			        SELECT
			        	<foreach collection="pQuaterList" item="item" index="index">
							sum(DECODE(HADER_NM ,#{item},ROUND(((ACC_NET_AMOUNT - LEAD_ACC_NET_AMOUNT) / DECODE(LEAD_ACC_NET_AMOUNT, 0, NULL, LEAD_ACC_NET_AMOUNT) * 100), 2))) AS RATE_${item},
						</foreach>
			            corp_code,
			            corp_name,
			            account_id
			        FROM (
			            SELECT 
			                rnk, corp_code, corp_NAME, bsns_year, reprt_code, reprt_nm, account_id, acc_net_amount, DECODE(REPRT_CODE,'11011','Q4_','11012','Q2_')||BSNS_YEAR AS HADER_NM,
			                LEAD(nvl(acc_net_amount, 0))
			                OVER(PARTITION BY corp_code, account_id
			                 ORDER BY corp_code, account_id, bsns_year DESC, reprt_code ASC ) AS LEAD_acc_net_amount
			            FROM (
			                SELECT
			                    dense_rank() over(PARTITION BY corp_code,account_id  ORDER BY account_id, bsns_year DESC, reprt_code ASC) as rnk,
			                    corp_code, CORP_NAME, bsns_year, reprt_code, reprt_nm, account_id, lead_acc_net_amount, lead_bsns_year,
			                    NVL(DECODE(reprt_code,'11011', decode(bsns_year,lead_bsns_year,(acc_net_amount-lead_acc_net_amount),null),acc_net_amount),0) as acc_net_amount
			                FROM (
			                    SELECT
			                        A.corp_code, bsns_year, reprt_code, reprt_nm, B.CORP_NAME,
			                        replace(account_id, 'ifrs_', 'ifrs-full_') as account_id,
			                        accumulated_net_amount as acc_net_amount,
			                        LEAD(nvl(accumulated_net_amount, 0))
			                        OVER(PARTITION BY A.corp_code, replace(account_id, 'ifrs_', 'ifrs-full_')
			                         ORDER BY A.corp_code, replace(account_id, 'ifrs_', 'ifrs-full_'),
			                             bsns_year DESC, reprt_code ASC ) as lead_acc_net_amount,
			                        LEAD(nvl(bsns_year, 0))
			                        OVER(PARTITION BY A.corp_code, replace(account_id, 'ifrs_', 'ifrs-full_')
			                         ORDER BY A.corp_code, replace(account_id, 'ifrs_', 'ifrs-full_'),
			                             bsns_year DESC, reprt_code ASC ) as lead_bsns_year
			                    FROM
			                        tb_bplc_cis A INNER JOIN TB_BPLC_DETAIL B 
			                    ON A.CORP_CODE = B.STOCK_CODE
			                    WHERE
			                        1 = 1
									<include refid = "whereReport"/>
			                )
			                ORDER BY
			                    corp_code,
			                    account_id,
			                    bsns_year DESC,
			                    reprt_code ASC
			            )   WHERE 1=1
			            <![CDATA[
			            	                AND RNK < 6
			            ]]>
			        )
			        GROUP BY
			        corp_code,
			        corp_name,
			        account_id
			    ) a
			    WHERE
			    1 = 1
				<if test="chkYearList != '' and chkYearList != null ">
					<foreach collection="chkYearList" item="item" >
						AND RATE_${item} > #{chkAccRate}
					</foreach>
				</if>  
			    )
			WHERE
			        1 = 1
			<if test="pAccountCnt != 0 ">
				and rnk = #{pAccountCnt}
			</if>
			<if test="pAccountCnt == 0 ">
				and rnk = 3
			</if>
		</if>
	</select>
	
	
	<select id="getReportList" parameterType="hashMap" resultType="HashMap">  
		<if test="pReportCd == '11011' ">
		    SELECT 	
		    		<foreach collection="pYearList" item="item" index="index">
						RATE_${index},
					</foreach>
					DENSE_RANK() OVER(ORDER BY stock_code) AS rnum, SEQ, stock_code , corp_name , account_id, fun_getAccNm(ACCOUNT_ID) as account_nm, corp_code
				FROM (
					SELECT 
					    2 AS "SEQ",
					    <foreach collection="pYearList" item="item" index="index">
					    	<![CDATA[          	
							NVL(sum(DECODE(bsns_year ,#{item},ROUND( case 
                                        when ACC_NET_AMOUNT > 0 and LEAD_ACC_NET_AMOUNT < 0 
                                        then - ((ACC_NET_AMOUNT - LEAD_ACC_NET_AMOUNT) / DECODE(LEAD_ACC_NET_AMOUNT, 0, null, LEAD_ACC_NET_AMOUNT) * 100 )
                                        else ((ACC_NET_AMOUNT - LEAD_ACC_NET_AMOUNT) / DECODE(LEAD_ACC_NET_AMOUNT, 0, null, LEAD_ACC_NET_AMOUNT) * 100 )
                                        end
                                    ,
                                 2))),0) AS RATE_${index},
							]]>
						</foreach>
					    stock_code , corp_name , account_id, corp_code
					FROM (
						select 
						        NVL(A.ACCUMULATED_NET_AMOUNT,0) AS ACC_NET_AMOUNT, LEAD(NVL(A.ACCUMULATED_NET_AMOUNT,0)) OVER (PARTITION BY A.CORP_CODE, REPLACE(A.ACCOUNT_ID,'ifrs_','ifrs-full_') ORDER BY A.CORP_CODE, A.BSNS_YEAR DESC, A.REPRT_CODE ASC) AS LEAD_ACC_NET_AMOUNT,
						        a.corp_code as stock_code, b.corp_name , REPLACE(a.ACCOUNT_ID,'ifrs_','ifrs-full_') as ACCOUNT_ID, a.bsns_year, b.corp_code
						from 	tb_Bplc_cis a inner join tb_Bplc b
						on 		a.corp_code = b.stock_code
						where 1=1
							<include refid = "whereReport"/>
							AND A.REPRT_CODE = #{pReportCd}
						group by 
                              a.corp_code,
			                  b.corp_name,
			                  replace(a.account_id, 'ifrs_', 'ifrs-full_'),
			                  a.bsns_year,
			                  b.corp_code,
			                  a.reprt_code,
			                  net_amount,
			                  accumulated_net_amount
					) a
					where 	1=1
					group by 
							stock_code , corp_name , account_id, corp_code
					union all
					select 
					        1 AS "SEQ",
					        <foreach collection="pYearList" item="item" index="index">
								NVL(ROUND(sum(decode(a.bsns_year ,#{item},a.ACCUMULATED_NET_AMOUNT)/100000000),3),0) AS RATE_${index},
							</foreach>
					        a.corp_code as stock_code, b.corp_name , REPLACE(A.ACCOUNT_ID,'ifrs_','ifrs-full_') as account_id, b.corp_code
					from 	tb_Bplc_cis a inner join tb_Bplc b
					on 		a.corp_code = b.stock_code
					where 	1=1
							<include refid = "whereReport"/>
							AND A.REPRT_CODE = #{pReportCd}
					group by 
							a.corp_code , b.corp_name , REPLACE(A.ACCOUNT_ID,'ifrs_','ifrs-full_'), b.corp_code
				) A
				order by stock_code, (select ordr from tb_code_account where code = account_id), SEQ
		</if>
		<if test="pReportCd == '11012' ">
			SELECT 	
					<foreach collection="pQuaterList" item="item" index="index">
		    			NVL(${item},0) AS RATE_${index},
					</foreach>
					DENSE_RANK() OVER(ORDER BY stock_code) AS rnum, SEQ, stock_code , corp_name , account_id, fun_getAccNm(ACCOUNT_ID) as account_nm, corp_code
			FROM (
			        SELECT
			            2 AS "SEQ",
			            <foreach collection="pQuaterList" item="item" index="index">
			            	<![CDATA[          	
							SUM(decode(HADER_NM,#{item},ROUND( case 
                                        when ACC_NET_AMOUNT > 0 and LEAD_ACC_NET_AMOUNT < 0 
                                        then - ((ACC_NET_AMOUNT - LEAD_ACC_NET_AMOUNT) / DECODE(LEAD_ACC_NET_AMOUNT, 0, null, LEAD_ACC_NET_AMOUNT) * 100 )
                                        else ((ACC_NET_AMOUNT - LEAD_ACC_NET_AMOUNT) / DECODE(LEAD_ACC_NET_AMOUNT, 0, null, LEAD_ACC_NET_AMOUNT) * 100 )
                                        end
                                    ,
                                 2))) AS ${item},
							]]>
						</foreach>
			            corp_code, corp_name, account_id, STOCK_CODE
			        FROM (
			            SELECT 
			                rnk, corp_code, corp_NAME, bsns_year, reprt_code, reprt_nm, account_id, STOCK_CODE, acc_net_amount, DECODE(REPRT_CODE,'11011','Q4_','11012','Q2_')||BSNS_YEAR AS HADER_NM,
			                LEAD(nvl(acc_net_amount, 0))
			                OVER(PARTITION BY corp_code, account_id ORDER BY corp_code, account_id, bsns_year DESC, reprt_code ASC ) AS LEAD_acc_net_amount
			            FROM (
			                SELECT
			                    dense_rank() over(PARTITION BY STOCK_CODE,account_id  ORDER BY account_id, bsns_year DESC, reprt_code ASC) as rnk,
			                    corp_code, CORP_NAME, bsns_year, reprt_code, reprt_nm, account_id, STOCK_CODE, lead_acc_net_amount, lead_bsns_year, 
			                    NVL(DECODE(reprt_code,'11011', decode(bsns_year,lead_bsns_year,(acc_net_amount-lead_acc_net_amount),null),acc_net_amount),0) as acc_net_amount
			                FROM (
			                    SELECT
			                        A.corp_code AS STOCK_CODE, bsns_year, reprt_code, reprt_nm, B.CORP_NAME, B.CORP_CODE,
			                        replace(account_id, 'ifrs_', 'ifrs-full_') as account_id,
			                        accumulated_net_amount as acc_net_amount,
			                        LEAD(nvl(accumulated_net_amount, 0))
			                        OVER(PARTITION BY A.corp_code, replace(account_id, 'ifrs_', 'ifrs-full_')
			                         ORDER BY A.corp_code, replace(account_id, 'ifrs_', 'ifrs-full_'),
			                             bsns_year DESC, reprt_code ASC ) as lead_acc_net_amount,
			                        LEAD(nvl(bsns_year, 0))
			                        OVER(PARTITION BY A.corp_code, replace(account_id, 'ifrs_', 'ifrs-full_')
			                         ORDER BY A.corp_code, replace(account_id, 'ifrs_', 'ifrs-full_'),
			                             bsns_year DESC, reprt_code ASC ) as lead_bsns_year
			                    FROM
			                        tb_bplc_cis A INNER JOIN TB_BPLC B 
			                    ON A.CORP_CODE = B.STOCK_CODE
			                    WHERE
			                        1 = 1
			                        <include refid = "whereReport"/>
			                    GROUP BY 
			                    	A.corp_code, bsns_year, reprt_code, reprt_nm, B.CORP_NAME, B.CORP_CODE,
			                        replace(account_id, 'ifrs_', 'ifrs-full_'),
			                        accumulated_net_amount
			                )
			                ORDER BY
			                    corp_code,
			                    account_id,
			                    bsns_year DESC,
			                    reprt_code ASC
			            )   WHERE 1=1
			                <![CDATA[
            	                AND RNK < 6
			            	]]>
			        )
			        GROUP BY
			        corp_code, corp_name, STOCK_CODE, account_id
			        UNION ALL 
			        SELECT
			            1 as "SEQ",
			            <foreach collection="pQuaterList" item="item" index="index">
							NVL(ROUND(sum(decode(HADER_NM ,#{item},acc_net_amount)/100000000),3),0) AS ${item},
						</foreach>
			            corp_code, corp_name, account_id, STOCK_CODE
			        FROM (
			            SELECT 
			                rnk, corp_code, corp_NAME, bsns_year, reprt_code, reprt_nm, account_id, STOCK_CODE, acc_net_amount, DECODE(REPRT_CODE,'11011','Q4_','11012','Q2_')||BSNS_YEAR AS HADER_NM
			            FROM (
			                SELECT
			                    dense_rank() over(PARTITION BY corp_code,account_id  ORDER BY account_id, bsns_year DESC, reprt_code ASC) as rnk,
			                    corp_code, CORP_NAME, bsns_year, reprt_code, reprt_nm, account_id, STOCK_CODE,
			                    NVL(DECODE(reprt_code,'11011', decode(bsns_year,lead_bsns_year,(acc_net_amount-lead_acc_net_amount),null),acc_net_amount),0) as acc_net_amount
			                FROM (
			                    SELECT
			                        A.corp_code AS STOCK_CODE, bsns_year, reprt_code, reprt_nm, B.CORP_NAME, B.corp_code,
			                        replace(account_id, 'ifrs_', 'ifrs-full_') as account_id,
			                        accumulated_net_amount as acc_net_amount,
			                        LEAD(nvl(accumulated_net_amount, 0))
			                        OVER(PARTITION BY A.corp_code, replace(account_id, 'ifrs_', 'ifrs-full_')
			                         ORDER BY A.corp_code, replace(account_id, 'ifrs_', 'ifrs-full_'),
			                             bsns_year DESC, reprt_code ASC ) as lead_acc_net_amount,
			                        LEAD(nvl(bsns_year, 0))
			                        OVER(PARTITION BY A.corp_code, replace(account_id, 'ifrs_', 'ifrs-full_')
			                         ORDER BY A.corp_code, replace(account_id, 'ifrs_', 'ifrs-full_'),
			                             bsns_year DESC, reprt_code ASC ) as lead_bsns_year
			                    FROM
			                        tb_bplc_cis A INNER JOIN TB_BPLC B 
			                    ON A.CORP_CODE = B.STOCK_CODE
			                    WHERE
			                        1 = 1
			                        <include refid = "whereReport"/>
			                   	GROUP BY 
			                    	A.corp_code, bsns_year, reprt_code, reprt_nm, B.CORP_NAME, B.corp_code,
			                        replace(account_id, 'ifrs_', 'ifrs-full_'),
			                        accumulated_net_amount
			                )
			                ORDER BY
			                    corp_code,
			                    account_id,
			                    bsns_year DESC,
			                    reprt_code ASC
			            )   WHERE 1=1
			                <![CDATA[
            	                AND RNK < 6
			            	]]>
			        )
			        GROUP BY
			        corp_code, corp_name, STOCK_CODE, account_id
			) A
			order by stock_code, (select ordr from tb_code_account where code = account_id), SEQ
		</if>
	</select>
	
	
	<select id="getReportDetailList" parameterType="hashMap" resultType="HashMap">  
	
	SELECT 	CORP_CODE, CORP_NAME, BSNS_YEAR, REPRT_CODE,
			sj_div, account_id, 
			NET_AMOUNT, ROUND(((NET_AMOUNT - LEAD_NET_AMOUNT) / DECODE(NET_AMOUNT, 0, NULL, NET_AMOUNT) * 100), 2) AS NET_AMOUNT_RATE,
			ACC_NET_AMOUNT, ROUND(((ACC_NET_AMOUNT - LEAD_ACC_NET_AMOUNT) / DECODE(LEAD_ACC_NET_AMOUNT, 0, NULL, LEAD_ACC_NET_AMOUNT) * 100), 2) AS ACC_NET_AMOUNT_RATE, 
			BEF_NET_AMOUNT, ROUND(((BEF_NET_AMOUNT - LEAD_BEF_NET_AMOUNT) / DECODE(LEAD_BEF_NET_AMOUNT, 0, NULL, LEAD_BEF_NET_AMOUNT) * 100), 2) AS BEF_NET_AMOUNT_RATE, 
			BEF_ACC_NET_AMOUNT, ROUND(((BEF_ACC_NET_AMOUNT - LEAD_BEF_ACC_NET_AMOUNT) / DECODE(LEAD_BEF_ACC_NET_AMOUNT, 0, NULL, LEAD_BEF_ACC_NET_AMOUNT) * 100), 2) AS BEF_ACC_NET_AMOUNT_RATE
	FROM (
	    SELECT
	        a.corp_code, b.corp_name, a.bsns_year, a.reprt_code,
	        a.sj_div, a.account_id, 
	        nvl(a.net_amount,0) as net_amount, lead(nvl(a.net_amount,0)) over (partition by a.corp_code, a.account_id order by a.corp_code, a.bsns_year desc, a.reprt_code asc) as lead_net_amount,
	        nvl(a.accumulated_net_amount,0) as acc_net_amount, lead(nvl(a.accumulated_net_amount,0)) over (partition by a.corp_code, a.account_id order by a.corp_code, a.bsns_year desc, a.reprt_code asc) as lead_acc_net_amount,
	        nvl(a.bef_net_amount,0) as bef_net_amount,  lead(nvl(a.bef_net_amount,0)) over (partition by a.corp_code, a.account_id order by a.corp_code, a.bsns_year desc, a.reprt_code asc) as lead_bef_net_amount,
	        nvl(a.bef_accumulated_net_amount,0) as bef_acc_net_amount, lead(nvl(a.bef_accumulated_net_amount,0)) over (partition by a.corp_code, a.account_id order by a.corp_code, a.bsns_year desc, a.reprt_code asc) as lead_bef_acc_net_amount
	    FROM
	        tb_bplc_cis a INNER JOIN tb_bplc b 
	        ON a.corp_code = b.stock_code
	        where 1=1
	        order by a.corp_code, a.account_id, a.bsns_year desc, a.reprt_code asc
	)
    </select>
</mapper>