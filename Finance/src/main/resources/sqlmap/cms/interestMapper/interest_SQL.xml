<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE  mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="interestMapper">

	<sql id="whereInterest">
		<if test="(pStartYear != null and pStartYear != '') or (pEndYear != null and pEndYear != '') ">
			AND A.BSNS_YEAR BETWEEN #{pStartYear} AND #{pEndYear}
		</if>
		<if test=" pCorpCd != null and pCorpCd != '' ">
			AND A.CORP_CODE = #{pCorpCd}
		</if>
		<if test=" curUserId != null and curUserId != ''  ">
			AND A.USER_ID = #{curUserId}
		</if>
	</sql>
	
	<select id="getInterest" parameterType="Map" resultType="HashMap">  
	    select 
	    	CORP_CODE, CORP_NAME, STOCK_CODE, USER_ID, CREATE_ID, CREATE_DT, CHANGE_ID, CHANGE_DT, TO_CHAR(MEMO) AS MEMO
	    from TB_INTEREST A
	    WHERE 1=1
	    	<include refid = "whereInterest"/>
	    	
	</select>
	
	<insert id="insertInterestCorp" parameterType="HashMap"  >  
		MERGE 
		 INTO TB_INTEREST a
		USING dual
		   ON (
		   		a.CORP_CODE = #{CORP_CODE}
		   		and a.USER_ID = #{curUserId}
		   )
		 WHEN MATCHED THEN
		      UPDATE
		         <set>
					<if test="MEMO != null and MEMO != '' ">
						MEMO		=	#{MEMO},
					</if>
					a.CHANGE_ID = 'SYSTEM_JB',
		          	a.CHANGE_DT = TO_CHAR(SYSDATE,'YYYY-MM-DD')
				</set>
		 WHEN NOT MATCHED THEN
				INSERT (
					<if test="CORP_CODE != null and CORP_CODE != '' ">
						CORP_CODE ,
					</if>
				    <if test="CORP_NAME != null and CORP_NAME != '' ">
						CORP_NAME ,
					</if>
					<if test="STOCK_CODE != null and STOCK_CODE != '' ">
						STOCK_CODE ,
					</if>
					<if test="curUserId != null and curUserId != '' ">
						USER_ID ,
					</if>
					<if test="MEMO != null and MEMO != '' ">
						MEMO ,
					</if>
				    CREATE_ID ,CREATE_DT ,CHANGE_ID ,CHANGE_DT	
				) VALUES (
					<if test="CORP_CODE != null and CORP_CODE != '' ">
						#{CORP_CODE} ,
					</if>
				    <if test="CORP_NAME != null and CORP_NAME != '' ">
						#{CORP_NAME} ,
					</if>
					<if test="STOCK_CODE != null and STOCK_CODE != '' ">
						#{STOCK_CODE} ,
					</if>
					<if test="curUserId != null and curUserId != '' ">
						#{curUserId} ,
					</if>
					<if test="MEMO != null and MEMO != '' ">
						#{MEMO},
					</if>
				    'SYSTEM_JB' ,TO_CHAR(SYSDATE,'YYYY-MM-DD') ,'SYSTEM_JB' ,TO_CHAR(SYSDATE,'YYYY-MM-DD')
				)
	    
	</insert>
	
	<insert id="deleteInterestCorp" parameterType="HashMap"  >  
	    DELETE  TB_INTEREST 
	    WHERE CORP_CODE = #{CORP_CODE}
	    AND USER_ID = #{curUserId}
	</insert>
	
	<select id="getReportList" parameterType="HashMap" resultType="HashMap">  
		<if test="pReportCd == '11011' ">
			SELECT 	
		    		<foreach collection="pYearList" item="item" index="index">
						RATE_${index},
					</foreach>
					DENSE_RANK() OVER(ORDER BY stock_code) AS rnum, SEQ, stock_code , corp_name , account_id, fun_getAccNm(ACCOUNT_ID) as account_nm, corp_code, USER_ID
				FROM (
					SELECT 
					    2 AS "SEQ",
					    <foreach collection="pYearList" item="item" index="index">
							<![CDATA[          	
							NVL(sum(DECODE(bsns_year ,#{item},ROUND( case 
                                        when ACC_NET_AMOUNT > 0 and LEAD_ACC_NET_AMOUNT < 0 
                                        then - ((ACC_NET_AMOUNT - LEAD_ACC_NET_AMOUNT) / DECODE(LEAD_ACC_NET_AMOUNT, 0, null, LEAD_ACC_NET_AMOUNT) * 100 )
                                        else ((ACC_NET_AMOUNT - LEAD_ACC_NET_AMOUNT) / DECODE(LEAD_ACC_NET_AMOUNT, 0, null, LEAD_ACC_NET_AMOUNT) * 100 )
                                        end
                                    ,
                                 2))),0) AS RATE_${index},
							]]>
						</foreach>
					    stock_code , corp_name , account_id, corp_code, USER_ID
					FROM (
						select 
						        NVL(A.ACCUMULATED_NET_AMOUNT,0) AS ACC_NET_AMOUNT, LEAD(NVL(A.ACCUMULATED_NET_AMOUNT,0)) OVER (PARTITION BY A.CORP_CODE, REPLACE(A.ACCOUNT_ID,'ifrs_','ifrs-full_') ORDER BY A.CORP_CODE, A.BSNS_YEAR DESC, A.REPRT_CODE ASC) AS LEAD_ACC_NET_AMOUNT,
						        a.corp_code as stock_code, b.corp_name , REPLACE(a.ACCOUNT_ID,'ifrs_','ifrs-full_') as ACCOUNT_ID, a.bsns_year, b.corp_code, B.USER_ID
						from 	tb_Bplc_cis a inner join TB_INTEREST b
						on 		a.corp_code = b.stock_code
						where 1=1
							AND replace(account_id, 'ifrs_', 'ifrs-full_') IN ( 'ifrs-full_Revenue', 'dart_OperatingIncomeLoss', 'ifrs-full_ProfitLoss')
							AND a.bsns_year BETWEEN #{pStartYear} AND #{pEndYear}
							AND A.REPRT_CODE = #{pReportCd}
							AND B.USER_ID = #{curUserId}
						group by 
                              a.corp_code,
			                  b.corp_name,
			                  replace(a.account_id, 'ifrs_', 'ifrs-full_'),
			                  a.bsns_year,
			                  b.corp_code,
			                  a.reprt_code, 
			                  B.USER_ID,
			                  net_amount,
			                  accumulated_net_amount
					) a
					where 	1=1
					group by 
							stock_code , corp_name , account_id, corp_code, USER_ID
					union all
					select 
					        1 AS "SEQ",
					        <foreach collection="pYearList" item="item" index="index">
								NVL(ROUND(sum(decode(a.bsns_year ,#{item},a.ACCUMULATED_NET_AMOUNT)/100000000),3),0) AS RATE_${index},
							</foreach>
					        a.corp_code as stock_code, b.corp_name , REPLACE(A.ACCOUNT_ID,'ifrs_','ifrs-full_') as account_id, b.corp_code, B.USER_ID
					from 	tb_Bplc_cis a inner join TB_INTEREST b
					on 		a.corp_code = b.stock_code
					where 	1=1
							AND replace(account_id, 'ifrs_', 'ifrs-full_') IN ( 'ifrs-full_Revenue', 'dart_OperatingIncomeLoss', 'ifrs-full_ProfitLoss')
							AND a.bsns_year BETWEEN #{pStartYear} AND #{pEndYear}
							AND A.REPRT_CODE = #{pReportCd}
							AND B.USER_ID = #{curUserId}
					group by 
							a.corp_code , b.corp_name , REPLACE(A.ACCOUNT_ID,'ifrs_','ifrs-full_'), b.corp_code, B.USER_ID
				) A
				order by stock_code, (select ordr from tb_code_account where code = account_id), SEQ
		</if>
		<if test="pReportCd == '11012' ">
			SELECT 	
					<foreach collection="pQuaterList" item="item" index="index">
		    			NVL(${item},0) AS RATE_${index},
					</foreach>
					DENSE_RANK() OVER(ORDER BY stock_code) AS rnum, SEQ, stock_code , corp_name , account_id, fun_getAccNm(ACCOUNT_ID) as account_nm, corp_code
			FROM (
			        SELECT
			            2 AS "SEQ",
			            <foreach collection="pQuaterList" item="item" index="index">
							<![CDATA[          	
							SUM(decode(HADER_NM,#{item},ROUND( case 
                                        when ACC_NET_AMOUNT > 0 and LEAD_ACC_NET_AMOUNT < 0 
                                        then - ((ACC_NET_AMOUNT - LEAD_ACC_NET_AMOUNT) / DECODE(LEAD_ACC_NET_AMOUNT, 0, null, LEAD_ACC_NET_AMOUNT) * 100 )
                                        else ((ACC_NET_AMOUNT - LEAD_ACC_NET_AMOUNT) / DECODE(LEAD_ACC_NET_AMOUNT, 0, null, LEAD_ACC_NET_AMOUNT) * 100 )
                                        end
                                    ,
                                 2))) AS ${item},
							]]>
						</foreach>
			            corp_code, corp_name, account_id, STOCK_CODE, USER_ID
			        FROM (
			            SELECT 
			                rnk, corp_code, corp_NAME, bsns_year, reprt_code, reprt_nm, account_id, STOCK_CODE, USER_ID , acc_net_amount, DECODE(REPRT_CODE,'11011','Q4_','11012','Q2_')||BSNS_YEAR AS HADER_NM,
			                LEAD(nvl(acc_net_amount, 0))
			                OVER(PARTITION BY corp_code, account_id ORDER BY corp_code, account_id, bsns_year DESC, reprt_code ASC ) AS LEAD_acc_net_amount
			            FROM (
			                SELECT
			                    dense_rank() over(PARTITION BY corp_code,account_id  ORDER BY account_id, bsns_year DESC, reprt_code ASC) as rnk,
			                    corp_code, CORP_NAME, bsns_year, reprt_code, reprt_nm, account_id, STOCK_CODE, USER_ID , lead_acc_net_amount, lead_bsns_year, 
			                    NVL(DECODE(reprt_code,'11011', decode(bsns_year,lead_bsns_year,(acc_net_amount-lead_acc_net_amount),null),acc_net_amount),0) as acc_net_amount
			                FROM (
			                    SELECT
			                        A.corp_code AS STOCK_CODE, bsns_year, reprt_code, reprt_nm, B.CORP_NAME, B.CORP_CODE, B.USER_ID ,
			                        replace(account_id, 'ifrs_', 'ifrs-full_') as account_id,
			                        accumulated_net_amount as acc_net_amount,
			                        LEAD(nvl(accumulated_net_amount, 0))
			                        OVER(PARTITION BY A.corp_code, replace(account_id, 'ifrs_', 'ifrs-full_')
			                         ORDER BY A.corp_code, replace(account_id, 'ifrs_', 'ifrs-full_'),
			                             bsns_year DESC, reprt_code ASC ) as lead_acc_net_amount,
			                        LEAD(nvl(bsns_year, 0))
			                        OVER(PARTITION BY A.corp_code, replace(account_id, 'ifrs_', 'ifrs-full_')
			                         ORDER BY A.corp_code, replace(account_id, 'ifrs_', 'ifrs-full_'),
			                             bsns_year DESC, reprt_code ASC ) as lead_bsns_year
			                    FROM
			                        tb_bplc_cis A INNER JOIN TB_INTEREST B 
			                    ON A.CORP_CODE = B.STOCK_CODE
			                    WHERE
			                        1 = 1
			                        AND replace(account_id, 'ifrs_', 'ifrs-full_') IN ( 'ifrs-full_Revenue', 'dart_OperatingIncomeLoss', 'ifrs-full_ProfitLoss')
			                        AND a.bsns_year BETWEEN #{pStartYear} AND #{pEndYear}
			                        AND B.USER_ID = #{curUserId}
			                    GROUP BY 
			                    	A.corp_code, bsns_year, reprt_code, reprt_nm, B.CORP_NAME, B.CORP_CODE, B.USER_ID,
			                        replace(account_id, 'ifrs_', 'ifrs-full_'),
			                        accumulated_net_amount
			                )
			                ORDER BY
			                    corp_code,
			                    account_id,
			                    bsns_year DESC,
			                    reprt_code ASC
			            )   WHERE 1=1
			                <![CDATA[
            	                AND RNK <= 6
			            	]]>
			        )
			        GROUP BY
			        corp_code, corp_name, STOCK_CODE, USER_ID, account_id
			        UNION ALL 
			        SELECT
			            1 as "SEQ",
			            <foreach collection="pQuaterList" item="item" index="index">
			            	NVL(ROUND(sum(decode(HADER_NM ,#{item},acc_net_amount)/100000000),3),0) AS ${item},
						</foreach>
			            corp_code, corp_name, account_id, STOCK_CODE, USER_ID
			        FROM (
			            SELECT 
			                rnk, corp_code, corp_NAME, bsns_year, reprt_code, reprt_nm, account_id, STOCK_CODE, USER_ID, acc_net_amount, DECODE(REPRT_CODE,'11011','Q4_','11012','Q2_')||BSNS_YEAR AS HADER_NM
			            FROM (
			                SELECT
			                    dense_rank() over(PARTITION BY corp_code,account_id  ORDER BY account_id, bsns_year DESC, reprt_code ASC) as rnk,
			                    corp_code, CORP_NAME, bsns_year, reprt_code, reprt_nm, account_id, STOCK_CODE, USER_ID,
			                    NVL(DECODE(reprt_code,'11011', decode(bsns_year,lead_bsns_year,(acc_net_amount-lead_acc_net_amount),null),acc_net_amount),0) as acc_net_amount
			                FROM (
			                    SELECT
			                        A.corp_code AS STOCK_CODE, bsns_year, reprt_code, reprt_nm, B.CORP_NAME, B.CORP_CODE, B.USER_ID,
			                        replace(account_id, 'ifrs_', 'ifrs-full_') as account_id,
			                        accumulated_net_amount as acc_net_amount,
			                        LEAD(nvl(accumulated_net_amount, 0))
			                        OVER(PARTITION BY A.corp_code, replace(account_id, 'ifrs_', 'ifrs-full_')
			                         ORDER BY A.corp_code, replace(account_id, 'ifrs_', 'ifrs-full_'),
			                             bsns_year DESC, reprt_code ASC ) as lead_acc_net_amount,
			                        LEAD(nvl(bsns_year, 0))
			                        OVER(PARTITION BY A.corp_code, replace(account_id, 'ifrs_', 'ifrs-full_')
			                         ORDER BY A.corp_code, replace(account_id, 'ifrs_', 'ifrs-full_'),
			                             bsns_year DESC, reprt_code ASC ) as lead_bsns_year
			                    FROM
			                        tb_bplc_cis A INNER JOIN TB_INTEREST B 
			                    ON A.CORP_CODE = B.STOCK_CODE
			                    WHERE
			                        1 = 1
			                        AND replace(account_id, 'ifrs_', 'ifrs-full_') IN ( 'ifrs-full_Revenue', 'dart_OperatingIncomeLoss', 'ifrs-full_ProfitLoss')
			                        AND a.bsns_year BETWEEN #{pStartYear} AND #{pEndYear}
			                        AND B.USER_ID = #{curUserId}
			                   	GROUP BY 
			                    	A.corp_code, bsns_year, reprt_code, reprt_nm, B.CORP_NAME, B.CORP_CODE, B.USER_ID,
			                        replace(account_id, 'ifrs_', 'ifrs-full_'),
			                        accumulated_net_amount
			                )
			                ORDER BY
			                    corp_code,
			                    account_id,
			                    bsns_year DESC,
			                    reprt_code ASC
			            )   WHERE 1=1
			                <![CDATA[
            	                AND RNK <= 6
			            	]]>
			        )
			        GROUP BY
			        corp_code, corp_name, STOCK_CODE, USER_ID, account_id
			) A
			order by stock_code, (select ordr from tb_code_account where code = account_id), SEQ
		</if>
	</select>
	
</mapper>